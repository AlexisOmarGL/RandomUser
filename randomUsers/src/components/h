<template>
  <div class="header">
    <h1>Random User</h1>
  </div>
  <v-container class="fill-width">
    <v-responsive class="align-center fill-height" max-width="-webkit-fill-available">
      <v-card class="pa-2" title="Filters">
        <v-row>
          <v-col cols="6">
            <v-select :items="gender" v-model="selectedGender" density="compact" label="Gender"></v-select>
          </v-col>
          <v-col cols="6">
            <v-select :items="nationality" v-model="selectedNat" density="compact" label="Nationality"></v-select>
          </v-col>
          <v-col cols="12">
            <v-range-slider v-model="rangeSlide" step="1" thumb-label="always" min="18" max="100" color="#5865f2" track-fill-color="green" track-color="red"></v-range-slider>
          </v-col>
          <v-col cols="5" align="center" class="mx-2">
            <v-btn variant="tonal" :disabled="showBtn" color="#5865f2" @click="getRandom(selectedGender, selectedNat, rangeSlide)">Show</v-btn>
          </v-col>
          <v-col cols="5" align="center" class="mx-2">
            <v-btn variant="tonal" class="mdi mdi-download" color="#5865f2" @click="downloadCSV" :disabled="disabled">CSV</v-btn>
          </v-col>
        </v-row>
      </v-card>

      <div class="my-3">
        <v-card v-if="show && !showDetails">
          <v-table height="300px" fixed-header>
            <thead>
              <tr>
                <th class="text-left"></th>
                <th class="text-left">Nombre</th>
                <th class="text-left">Genero</th>
                <th class="text-left">Edad</th>
                <th class="text-left">Nacionalidad</th>
                <th class="text-left">Tel√©fono</th>
                <th class="text-left">E-mail</th>
              </tr>
            </thead>
            <tbody>
              <tr v-for="(us, index) in fullname" :key="us.name" class="table-row">
                <td class="table-cell">
                  <v-btn class="trash" icon="mdi-delete-outline" @click="deleteRow(index)"></v-btn>
                </td>
                <td class="table-cell">
                  <v-chip @click="showUserDetails(us)">{{ us.name }}</v-chip>
                </td>
                <td class="table-cell">{{ us.gen }}</td>
                <td class="table-cell">{{ us.age }}</td>
                <td class="table-cell">{{ us.nat }}</td>
                <td class="table-cell">{{ us.phone }}</td>
                <td class="table-cell">{{ us.mail }}</td>
              </tr>
            </tbody>
          </v-table>
        </v-card>
        <div class="overlayDisplay">
          <v-overlay
            :model-value="overlay"
            class="align-center justify-center"
          >
            <v-progress-circular
              :model-value="value"
              :rotate="-90"
              :size="100"
              :width="15"
              color="primary"
            >
              {{ value }}
            </v-progress-circular>
          </v-overlay>
        </div>
      </div>
<v-row class="justify-center">
  <v-col cols="md-9 sm-12 ">
      <v-card  v-if="showDetails" class="user-details pa-5 " align="center"
      title="Selected User Details">
      <template v-slot:text>
        <p><strong>Name:</strong> {{ selectedUser.name }}</p>
        <p><strong>Gender:</strong> {{ selectedUser.gen }}</p>
        <p><strong>Age:</strong> {{ selectedUser.age }}</p>
        <p><strong>Nationality:</strong> {{ selectedUser.nat }}</p>
        <p><strong>Phone:</strong> {{ selectedUser.phone }}</p>
        <p><strong>Email:</strong> {{ selectedUser.mail }}</p>
        </template>
        <v-btn variant="flat" prepend-icon="mdi mdi-arrow-left-circle" color="indigo-darken-3" @click="hideUserDetails">Back to Table</v-btn>
      </v-card>
    </v-col>
    </v-row>
    </v-responsive>
  </v-container>
</template>

<script setup lang="ts">
import { getUser } from '@/api/randomUser';
import { ref, onBeforeUnmount } from 'vue';

interface User {
  name: {
    first: string;
    last: string;
  };
  dob: {
    age: number;
  };
  nat: string;
  gender: string;
  email: string;
  phone: string;
}

interface Fullname {
  name: string;
  gen: string;
  nat: string;
  mail: string;
  phone: string;
  age: number;
}

const rangeSlide = ref([18, 100]);
let gender = ['male', 'female'];
let nationality = ['AU', 'BR', 'CA', 'CH', 'DE', 'DK', 'ES', 'FI', 'FR', 'GB', 'IE', 'IN', 'IR', 'MX', 'NL', 'NO', 'NZ', 'RS', 'TR', 'UA', 'US'];

const selectedGender = ref<string | null>(null);
const selectedNat = ref<string | null>(null);
const fullname = ref<Fullname[]>([]);
const show = ref(false);
const showDetails = ref(false);
const disabled = ref(true);
const showBtn = ref(false);
const overlay = ref(false);
const value = ref(0);
const selectedUser = ref<Fullname | null>(null);
let interval: ReturnType<typeof setInterval>;

onBeforeUnmount(() => {
  clearInterval(interval);
});

async function getRandom(gend: string | null, natio: string | null, edad: number[] | null) {
  let minAge = edad ? edad[0] : 18;
  let maxAge = edad ? edad[1] : 100;
  disabled.value = true;
  natio = natio ? natio.toLowerCase() : '';
  gend = gend ? gend.toLowerCase() : '';

  show.value = true;
  try {
    const response = await getUser(natio, gend);
    const users: User[] = response.results;

    const usersInRange = users.filter(user => user.dob.age >= minAge && user.dob.age <= maxAge);

    fullname.value = usersInRange.map((user) => {
      const first = user.name.first;
      const last = user.name.last;
      const fullName = `${first} ${last}`;
      const nat = user.nat;
      const gen = user.gender;
      const mail = user.email;
      const phone = user.phone;
      const age = user.dob.age;
      return { name: fullName, gen: gen, nat: nat, mail: mail, phone: phone, age: age };
    });

    disabled.value = false;
  } catch (error) {
    console.error('Error fetching types:', error);
    disabled.value = false;
  }
}

function downloadCSV() {
  overlay.value = !overlay.value;
  openModal();
}

const openModal = () => {
  value.value = 0;
  interval = setInterval(() => {
    if (value.value === 100) {
      overlay.value = false;
      value.value = 100;
      return;
    }
    value.value += 10;
  }, 400);
}

function deleteRow(index: number) {
  fullname.value.splice(index, 1);
}

function showUserDetails(user: Fullname) {
  selectedUser.value = user;
  showDetails.value = true;
  disabled.value=true;
  showBtn.value=true;
}

function hideUserDetails() {
  showDetails.value = false;
  disabled.value=false;
  showBtn.value=false;

}
</script>

<style>
.header {
  text-align: center;
  background-color: #1abc23;
}

.trash {
  display: none !important;
}

.table-row:hover .trash {
  display: block !important;
}

.user-details {
  margin-top: 20px;
  background-color: #692929;
  padding: 10px;
  border-radius: 5px;
}

.user-details h2 {
  margin-bottom: 10px;
}

.user-details p {
  margin: 5px 0;
}
</style>
